package main;

public class FTPPacket {


	  //size of the FTP header:
	  static int HEADER_SIZE = 12;

	  //Fields that compose the FTP header
	 // public int SourcePort;
	  public int SequenceNumber;
	  public long SourceAddress;
	  public boolean ACK;
	  public boolean SYN;
	  public boolean FIN;
	  public int Length;
	  
	  //Bitstream of the FTP header
	  public byte[] header;

	  //size of the FTP data
	  public int data_size;
	  //Bitstream of the FTP data
	  public byte[] payload;
	  


	  //--------------------------
	  //Constructor of an FTPpacket object from header fields and data bitstream
	  //--------------------------
	  public FTPPacket(int SequenceNumber, long SourceAddress, boolean ACK, boolean SYN, boolean FIN, int data_length, byte[] data){  
		//Populate header
	   // this.SourcePort = SourcePort;
	    this.SequenceNumber=SequenceNumber;
	    this.SourceAddress=SourceAddress;
	    //build the header:
	    //--------------------------
	    header = new byte[HEADER_SIZE];
		header[0]=(byte) (SequenceNumber>>24);
		header[1]=(byte) (SequenceNumber>>16);
		header[2]=(byte) (SequenceNumber>>8);
		header[3]=(byte) (SequenceNumber&0xFF);
		header[4]=(byte) (SourceAddress>>24);
		header[5]=(byte) (SourceAddress>>16);
		header[6]=(byte) (SourceAddress>>8);
		header[7]=(byte) (SourceAddress&0xFF);
		  header[0] = (byte) (header[0] | Version << 7);
		  header[0] = (byte) (header[0] | Padding << 5);
		  header[0] = (byte) (header[0] | Extension << 4);
		  header[0] = (byte) (header[0] | CC << 3);
		  
		  header[1] = (byte) (header[1] | Marker << 7);
		  header[1] = (byte) (header[1] | PayloadType << 6);
		  header[2] = (byte) (SequenceNumber >> 8);
		  header[3] = (byte) (SequenceNumber & 0xFF);
		  for (int i=3; i>0; i--) {
			  header[7-i]=(byte)(TimeStamp>>(i*8));
		  }	  
		  header[7] = (byte) (TimeStamp & 0xFF);
		  for (int i=3; i>0; i--)
		  {
			  header[11-i]=(byte) (Ssrc>>(i*8));
		  }
		  header[11] = (byte) (Ssrc & 0xFF);
		  
		  
		  //	  for (int i=0;i<4;i++)
		  //{
		//	  header[8+i]=0;
		  //}
		  
		  // .....
	 

	    //fill the payload bitstream:
	    //--------------------------
	    payload_size = data_length;
	    payload = new byte[data_length];

	    //fill payload array of byte from data (given in parameter of the constructor)
	    //......
		  payload=data;

	    // ! Do not forget to uncomment method printheader() below !

	  }
	    
	  //--------------------------
	  //Constructor of an RTPpacket object from the packet bistream 
	  //--------------------------
	  public RTPpacket(byte[] packet, int packet_size)
	  {
	    //fill default fields:
	    Version = 2;
	    Padding = 0;
	    Extension = 0;
	    CC = 0;
	    Marker = 0;
	    Ssrc = 0;

	    //check if total packet size is lower than the header size  - ma
	    if (packet_size >= HEADER_SIZE) 
	      {
		//get the header bitsream:
		header = new byte[HEADER_SIZE];
		for (int i=0; i < HEADER_SIZE; i++)
		  header[i] = packet[i];

		//get the payload bitstream:
		payload_size = packet_size - HEADER_SIZE;
		payload = new byte[payload_size];
		for (int i=HEADER_SIZE; i < packet_size; i++)
		  payload[i-HEADER_SIZE] = packet[i];

		//interpret the changing fields of the header:
		PayloadType = header[1] & 127;
		SequenceNumber = unsigned_int(header[3]) + 256*unsigned_int(header[2]);
		TimeStamp = unsigned_int(header[7]) + 256*unsigned_int(header[6]) + 65536*unsigned_int(header[5]) + 16777216*unsigned_int(header[4]);
	      }
	 }

	  //--------------------------
	  //getpayload: return the payload bistream of the RTPpacket and its size
	  //--------------------------
	  public int getpayload(byte[] data) {

	    for (int i=0; i < payload_size; i++)
	      data[i] = payload[i];

	    return(payload_size);
	  }

	  //--------------------------
	  //getpayload_length: return the length of the payload
	  //--------------------------
	  public int getpayload_length() {
	    return(payload_size);
	  }

	  //--------------------------
	  //getlength: return the total length of the RTP packet
	  //--------------------------
	  public int getlength() {
	    return(payload_size + HEADER_SIZE);
	  }

	  //--------------------------
	  //getpacket: returns the packet bitstream and its length
	  //--------------------------
	  public int getpacket(byte[] packet)
	  {
	    //construct the packet = header + payload
	    for (int i=0; i < HEADER_SIZE; i++)
		packet[i] = header[i];
	    for (int i=0; i < payload_size; i++)
		packet[i+HEADER_SIZE] = payload[i];

	    //return total size of the packet
	    return(payload_size + HEADER_SIZE);
	  }

	  //--------------------------
	  //gettimestamp
	  //--------------------------

	  public int gettimestamp() {
	    return(TimeStamp);
	  }

	  //--------------------------
	  //getsequencenumber
	  //--------------------------
	  public int getsequencenumber() {
	    return(SequenceNumber);
	  }

	  //--------------------------
	  //getpayloadtype
	  //--------------------------
	  public int getpayloadtype() {
	    return(PayloadType);
	  }


	  //--------------------------
	  //print headers without the SSRC
	  //--------------------------
	  public void printheader()
	  {
	    //TO DO: uncomment
		/*for (int i=0; i < (HEADER_SIZE-4); i++)
	      {
		for (int j = 7; j>=0 ; j--)
		  if (((1<<j) & header[i] ) != 0)
		    System.out.print("1");
		else
		  System.out.print("0");
		System.out.print(" ");
	      }

	    System.out.println();*/
	  }

	  //return the unsigned value of 8-bit integer nb
	  static int unsigned_int(int nb) {
	    if (nb >= 0)
	      return(nb);
	    else
	      return(256+nb);
	  }

}
